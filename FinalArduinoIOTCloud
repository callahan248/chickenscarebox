
/*
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/d61532e0-90c1-4fdb-b368-1b1965d3f3e6

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  bool armButton;
  bool pir_sensor;
  bool stopButton;
  bool triggerButton;

*/

#include "thingProperties.h"

// ----------- Constants-----------
#define pirPin  9

const byte redLed = 2;
const byte greenLed = 3;
const byte yellowLed = 4;
const byte solenoidPin = 5;
const byte armedSound = 6;
const byte disarmedSound = 7;
const byte triggerSound = 8;
const byte airSupplyPin = 10;
const long yellowLed_BlinkInterval = 500UL;
const long redLed_BlinkInterval = 250UL;
const long solenoidDuration = 5000UL;
const long eventDuration = 10000UL;
const int soundDelay = 120; 

//--------------Variables (Changing)-------------

int yellowLedState = LOW;
int redLedState = LOW;
int greenLedState = LOW;

unsigned long currentMillis = 0;
unsigned long previousMillis = 0;
unsigned long eventMillis = 0;
unsigned long triggeredMillis = 0;
unsigned long yellowLed_PreviousMillis = 0;
unsigned long redLed_PreviousMillis = 0;
unsigned long solenoid_PreviousMillis = 0;

bool timerComplete = false;

int val = 0;

typedef enum // transition Events in Enumeration Format
{
  ARM_ON,   // arm button
  TRG_SIG,  // signal from either the PIR sensor, Gyro, or manual button
  ARM_OFF,  // disarm button
  TRG_BTN,  // manual trigger button
  STOP_BTN, // stop button
  TMR_DONE, // event timer
} TransitionEvent_e;


typedef enum // State Names in Enumeration Format
{
  DISARMED,
  ARMED,
  TRIGGERED,
} state_e;

int state = DISARMED;

// ---------------------------------------------Transition --> EnterState --> DoInState --> Transition -----------------------------------------------------------------
void TransitionFSM(TransitionEvent_e event);
void EnterState(void);
void DoInState(void);


void setup() {
  
  pinMode(redLed, OUTPUT); // Pin 2
  pinMode(greenLed, OUTPUT); // Pin 3
  pinMode(yellowLed, OUTPUT); // Pin 4
  pinMode(solenoidPin, OUTPUT); // Pin 5
  pinMode(armedSound, OUTPUT); // Pin 6
  pinMode(disarmedSound, OUTPUT); // Pin 7
  pinMode(triggerSound, OUTPUT); // Pin 8
  pinMode(pirPin, INPUT); // Pin 9
  pinMode(airSupplyPin, OUTPUT); // Pin 10


  Serial.begin(9600);
  delay(1500);

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  setDebugMessageLevel(4);
  ArduinoCloud.printDebugInfo();

  while (ArduinoCloud.connected() != 1) {
    ArduinoCloud.update();
    delay(500);
  }
}

void loop() {
  ArduinoCloud.update();
  DoInState();
}

void TransitionFSM(TransitionEvent_e event) // Transition events from each state to the next possible state. 
{

  int validTransition = 0;  // initial valid transition = not valid
  switch (state)
  {
    case DISARMED: // While in the disarmed state, allow either the "arm event" or "trigger button" event to transition FSM to "triggered"
      if (event == ARM_ON) {
        validTransition = 1;
        state = ARMED;
      }
      else if (event == TRG_BTN) {
        validTransition = 1;
        state = TRIGGERED;
      }
      break;

    case ARMED: // While in the armed state, allow either the "disarm event", "trigger signal" or "trigger button" to transition states
      if (event == ARM_OFF) {
        validTransition = 1;
        state = DISARMED;
      }
      else if (event == TRG_SIG) {
        validTransition = 1;
        state = TRIGGERED;
      }
      else if (event == TRG_BTN) {
        validTransition = 1;
        state = TRIGGERED;
      }
      break;

    case TRIGGERED: // While in the triggered state, wait for the timer to complete, or wait for the stop button.
      if (event == STOP_BTN) {
        validTransition = 1;
        state = DISARMED;
      }

      else if (event == TMR_DONE) {
        validTransition = 1;
        state = DISARMED;
      }
      break;

    default:
      // shouldn't get here
      break;
  }
  if (validTransition == 1) // if it's a valid transition, enter the correct state
  {
    EnterState();
  }
}

void EnterState(void) // "Enter State" = set the inputs, outputs, and initial state of them. 
{
  switch (state)
  {
    case DISARMED:
      messageUpdate = "SYSTEM DISARMED";
      digitalWrite(yellowLed, HIGH);
      digitalWrite(redLed, LOW);
      digitalWrite(greenLed, LOW);
      digitalWrite(solenoidPin, LOW);
      digitalWrite(disarmedSound, HIGH);
      delay(soundDelay);
      digitalWrite(disarmedSound, LOW);
      break;

    case ARMED:
      // set all outputs as appropriate
      messageUpdate = "SYSTEM ARMED";
      digitalWrite(yellowLed, LOW);
      digitalWrite(redLed, HIGH);
      digitalWrite(greenLed, LOW);
      digitalWrite(solenoidPin, LOW);
      digitalWrite(armedSound, HIGH);
      delay(soundDelay);
      digitalWrite(armedSound, LOW);
      break;

    case TRIGGERED:
      // set all outputs as appropriate
      messageUpdate = "SYSTEM TRIGGERED";
      timerComplete = false;
      digitalWrite(solenoidPin, LOW);
      digitalWrite(yellowLed, LOW);
      digitalWrite(redLed, HIGH);
      digitalWrite(greenLed, HIGH);
      digitalWrite(triggerSound, HIGH);
      delay(soundDelay);
      digitalWrite(triggerSound, LOW);
      break;

    default:
      // shouldn't get here, but Ill add the disarmed variables for the sake of the arduino code
      messageUpdate = "SYSTEM DISARMED";
      digitalWrite(yellowLed, HIGH);
      digitalWrite(redLed, LOW);
      digitalWrite(greenLed, LOW);
      digitalWrite(solenoidPin, LOW);
      digitalWrite(disarmedSound, HIGH);
      delay(soundDelay);
      digitalWrite(disarmedSound, LOW);
      break;
  }
}

void DoInState(void)  // "DoInState" calls the transition when the conditions are met
{

  currentMillis = millis();

  switch (state)
  {
    case DISARMED:
      BlinkYellowLed ();
      if (triggerButton == HIGH) {
        TransitionFSM (TRG_BTN);
      }
      break;

    case ARMED:
      //|| (Gy > 50 || Gy < -50))
      val = digitalRead(pirPin); // start checking motion detector

      if (val == HIGH) {
        TransitionFSM (TRG_SIG);
      }
      break;

    case TRIGGERED:
      if (timerComplete == false) {
        if (currentMillis - triggeredMillis >= eventDuration) {
          triggeredMillis = currentMillis;
          TransitionFSM (TMR_DONE);
        }
        else {
          BlinkRedLed ();
          SolenoidTrigger ();
        }
      }

      if (stopButton == HIGH) {
        TransitionFSM (STOP_BTN);
      }
      break;
      
    default:
      // shouldn't get here
      break;
  }
} 

void BlinkYellowLed () {

  if (yellowLedState == LOW) {
    if (currentMillis - yellowLed_PreviousMillis >= yellowLed_BlinkInterval) {
      yellowLedState = HIGH;
      yellowLed_PreviousMillis = currentMillis;
    }
  }
  else if (currentMillis - yellowLed_PreviousMillis >= yellowLed_BlinkInterval) {
      yellowLedState = LOW;
      yellowLed_PreviousMillis = currentMillis;
    }
  digitalWrite(yellowLed, yellowLedState);
}

void BlinkRedLed () {
  if (redLedState == LOW) {
    if (currentMillis - redLed_PreviousMillis >= redLed_BlinkInterval) {
      redLedState = HIGH;
      redLed_PreviousMillis = currentMillis;
    }
  }
  else if (currentMillis - redLed_PreviousMillis >= redLed_BlinkInterval) {
    redLedState = LOW;
    redLed_PreviousMillis = currentMillis;
  }
  digitalWrite(redLed, redLedState);
}

void SolenoidTrigger () {
  if (currentMillis - solenoid_PreviousMillis >= solenoidDuration) {
    digitalWrite(solenoidPin, !digitalRead(solenoidPin));
    solenoid_PreviousMillis = currentMillis;
  } 
}

void onAirSupplyChange()  {
  if (airSupply == HIGH) {
    digitalWrite(airSupplyPin, HIGH);
  } else {
    digitalWrite(airSupplyPin, LOW);
  }
}

void onArmButtonChange()  {
  if (armButton == true) {
    TransitionFSM(ARM_ON);
  }
  else {
    TransitionFSM(ARM_OFF);
  }
}

void onTriggerButtonChange()  {
  if (triggerButton == true) {
    TransitionFSM(TRG_BTN);
  }
}

void onStopButtonChange()  {
  if (stopButton == true) {
    TransitionFSM(STOP_BTN);
    (armButton == false);
  }
}

void onMessageUpdateChange()  {

}


